# Workflow to produce a version of the compiler

name: Build the compiler

env:
  JAVA_ENV_VERSION: '21' # LTS version
  FOLDER: './compiler'   # Source code location

on:
  push: 
  pull_request:
  workflow_dispatch: 

jobs:

  build:
    runs-on: ubuntu-latest
    defaults: 
      run:
        working-directory: ${{env.FOLDER}}

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v4

      # Setting up Java for running mvn
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{env.JAVA_ENV_VERSION}}
          distribution: 'adopt'
          cache: 'maven'

      # Building the jpipe.jar artefact
      - name: Create executable jar with Maven
        run: mvn clean package -DskipTests -Dcheckstyle.skip

      # Cache Maven packages
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

  linter:
    runs-on: ubuntu-latest
    defaults: 
      run:
        working-directory: ${{env.FOLDER}}

    needs: [build]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{env.JAVA_ENV_VERSION}}
          distribution: 'adopt'
          cache: 'maven'
      # run linter
      - name: CheckStyle (Google ruleset)
        run: mvn checkstyle:check

  test:
    runs-on: ubuntu-latest
    defaults: 
      run:
        working-directory: ${{env.FOLDER}}

    needs: [build]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{env.JAVA_ENV_VERSION}}
          distribution: 'adopt'
          cache: 'maven'
      # run unit tests
      - name: Unit tests with Maven (surefire)
        run: mvn test

  integration-test:
    runs-on: ubuntu-latest
    defaults: 
      run:
        working-directory: ${{env.FOLDER}}
      
    needs: [ test ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{env.JAVA_ENV_VERSION}}
          distribution: 'adopt'
      # run integration tests (any test ending with IT)
      - name: Integration tests with Maven (failsafe)
        run: mvn verify -Dskip.tests.unit

  sonarqube:
    name: Code Quality check
    defaults: 
      run:
        working-directory: './compiler'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{env.JAVA_ENV_VERSION}}
          distribution: 'adopt' 

      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build and analyze
        continue-on-error: true
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=ace-design_jpipe    


  upload:
    runs-on: ubuntu-latest
    defaults: 
      run:
        working-directory: ${{env.FOLDER}}

    needs: [linter, integration-test]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{env.JAVA_ENV_VERSION}}
          distribution: 'adopt'
          cache: 'maven'

      - name: 
        run: mvn clean install -DskipTests -Dcheckstyle.skip
      
      - name: Upload JAR artefact
        uses: actions/upload-artifact@v4
        with:
          name: jpipe.jar
          path: compiler/jpipe.jar
  