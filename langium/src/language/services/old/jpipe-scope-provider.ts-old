
/*
import { AstUtils, AstNodeDescriptionProvider, Scope, LangiumCoreServices, ReferenceInfo, ScopeProvider, EMPTY_SCOPE, MapScope } from "langium";
import { Model, isModel, isSupportingStatement } from "../generated/ast.js";
export class JpipeScopeProvider implements ScopeProvider {
    private astNodeDescriptionProvider: AstNodeDescriptionProvider;
    
    constructor(services: LangiumCoreServices) {
        //get some helper services
        this.astNodeDescriptionProvider = services.workspace.AstNodeDescriptionProvider;
    }

    getScope(context: ReferenceInfo): Scope {
        if(isSupportingStatement(context.container) && (context.property === 'supporter' || context.property === 'supportee')){
            const model = AstUtils.getContainerOfType(context.container, isModel);
            if( model !== undefined){
                const variables = model.variables;

                //might have to map to variable.description idk
                const descriptions = variables.map(variable => this.astNodeDescriptionProvider.createDescription(variable,variable.name));
                return new MapScope(descriptions);
            }  
        }
        return EMPTY_SCOPE;
    }

    makeSupporterArray(model: Model | undefined){
        let arr: any[] = [];
        if(model !== undefined){
            model.supports.forEach((support) =>{
                arr.push(support.supporter);
            });
        }
        return arr;
    }

    makeSupporteArray(model: Model): any[]{
        let arr: any[] = [];
        model.supports.forEach((support) =>{
            arr.push(support.supportee);
        });
        return arr;
    }
    
}
*/